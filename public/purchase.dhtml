#!/usr/local/bin/perl  
#!/usr/bin/perl
###############################################
# first example using templating, xhtml and css
# (c) ckaduri, 2002-20013
# version 0.9b
#
##############################################
#use strict;
use Template;   #step 1
use DBI;
use CGI;

use Apache::Session::MySQL;

use lib '/export/srv/www/vhosts/main/store_int620/lib';
use CarStore::Users;
use CarStore::Cars;
use CarStore::Transactions;

use Data::Dumper;

use constant TEMPLATELIB => '/export/srv/www/vhosts/main/store_int620/tt2';
################################ 
## Declaration of Variables   ##
################################

my($template,
   $ttObject,
   $cgiObject,
   $vars,
   $db,
   $sql,
   $query_result,
   $template,
   %session,
   $sessionID,
   $cookie,
   $user,
   %car,
   $state,
   $form_submitted,
   %purchase_form,
   %errors
);
my($debug)=0;

my $dbuser = 'root';
my $dbpass = 'toor';
my $dbhost = 'localhost';
my $db_sess_table = 'sessions';
my $dbname = 'carstore_int620';

my $tax = {
    'AB' => { type => 'GST',     prov_rate => 0,     can_rate => 5},
    'BC' => { type => 'GST+PST', prov_rate => 7,     can_rate => 5},
    'MB' => { type => 'GST+PST', prov_rate => 8,     can_rate => 5},
    'NB' => { type => 'HST',     prov_rate => 10,    can_rate => 5},
    'NL' => { type => 'HST',     prov_rate => 10,    can_rate => 5},
    'NT' => { type => 'GST',     prov_rate => 0,     can_rate => 5},
    'NS' => { type => 'HST',     prov_rate => 10,    can_rate => 5},
    'NU' => { type => 'GST',     prov_rate => 0,     can_rate => 5},
    'ON' => { type => 'HST',     prov_rate => 8,     can_rate => 5},
    'PE' => { type => 'HST',     prov_rate => 10,    can_rate => 5},
    'QC' => { type => 'GST+QST', prov_rate => 9.975, can_rate => 5},
    'SK' => { type => 'GST+QST', prov_rate => 6,     can_rate => 5},
    'YT' => { type => 'GST',     prov_rate => 0,     can_rate => 5}
};

$form_submitted = 0;

#########################
# debug                 #
#########################
if($debug)
    {
    }
    
#########################
# Generate Magic Header #
#########################
$cgiObject=new CGI;

print STDOUT $cgiObject->header('text/html');

#########################
# Session Start         #
#########################

# get cookie
$sessionID = $cgiObject->cookie("PERLSESSID");

tie %session, "Apache::Session::MySQL", $sessionID, {
        DataSource => "DBI:mysql:host=$dbhost:database=$dbname",
        UserName => "$dbuser",
        Password => "$dbpass",
        TableName => "$db_sess_table",
        LockDataSource => "DBI:mysql:host=$dbhost:database=$dbname",
        LockUserName => "$dbuser",
        LockPassword => "$dbpass"
};

if (!defined ($sessionID)) {
    # New session
    #print "New Session\n";
    $sessionID = $session{_session_id};
    $session{count} = 0;
    $session{timestamp} = [ ];
    $cookie = $cgiObject->cookie(-name=>"PERLSESSID", -value=>$sessionID);
} else {
    #print "Old Session\n";
}

#print $sessionID;

++$session{count};
push( @{ $session{timestamp} }, scalar( localtime( time() ) ));

# send cookie
print STDOUT $cgiObject->header(-cookie => $cookie);

#########################
# Login                 #
#########################

if ($ENV{REQUEST_METHOD} eq "POST"){
    #print "user: ", $cgiObject->param('username');
    #print "pass: ", $cgiObject->param('passwd');
    #print "form: ", $cgiObject->param('submit');
    #print "logged_in: ", $session{logged_in};

    if ( $cgiObject->param('submit') eq "login_form" ){
        if( do_login($cgiObject->param('username'), $cgiObject->param('passwd'))){
            $session{logged_in} = 1;
            $user = getUserInfo($cgiObject->param('username'));
            $session{username} = $user->{username};
            $session{fname} = $user->{fname};
            $session{lname} = $user->{lname};
        } else {
            $session{logged_in} = 0;
            $errors{login} = 'Login failed';
        }
    } elsif ( $cgiObject->param('submit') eq "logout_form" ) {
        $session{logged_in} = 0;
        $session{username} = undef;
        $session{fname} = undef;
        $session{lname} = undef;
        #print "Logging out\n";

        ## End session
        #tied(%session)->delete();
        ## reset browser cookie
        #$cookie = $cgiObject->cookie(
        #    -name => "PERLSESSID",
        #    -value => $sessionID,
        #    -expires => "-1d"
        #);
    } elsif ( $cgiObject->param('submit') eq "purchase-car" ) {
        %car = %{ getCarInfo($cgiObject->param('carname')) };

        if ($session{logged_in}){
            $state = getUserState($session{username});
            
        } else {
        
        }

    } elsif ( $cgiObject->param('submit') eq "purchase-form" ) {
        $form_submitted = 1;
        %car = %{ getCarInfo($cgiObject->param('carname')) };
        if ($session{logged_in}){
            my $cardtype = $cgiObject->param('cardtype');
            my $cardnumber = $cgiObject->param('cardnumber');
            my $expiry = $cgiObject->param('expiry');
            my $sec = $cgiObject->param('sec');

            %purchase_form = (valid => 1);

            if ($cardtype = 'mastercard' or $cardtype eq 'visa'){
                $purchase_form{cardtype} = $cardtype;
            } else {
                $purchase_form{valid} = 0;
                $purchase_form{errmsg} = 'Invalid cardtype';
            }

            if ($cardnumber =~ /\d{16}/){
                $purchase_form{cardnumber} = $cardnumber;
            } else {
                $purchase_form{valid} = 0;
                $purchase_form{errmsg} = 'Invalid cardnumber';
            }

            if ($expiry =~ /\d{2}\/\d{2}/){
                $purchase_form{expiry} = $expiry;
            } else {
                $purchase_form{valid} = 0;
                $purchase_form{errmsg} = 'Invalid expiry';
            }

            if ($sec =~ /\d{3}/){
                $purchase_form{sec} = $sec;
            } else {
                $purchase_form{valid} = 0;
                $purchase_form{errmsg} = 'Invalid security code';
            }

            # If form ok, add transaction
            if ($purchase_form{valid}) {
                my $state = getUserState($session{username});
                my $total = $car{price} * (
                    1 + (($tax->{$state}->{prov_rate} + $tax->{$state}->{can_rate} ) / 100 ));
                my $carname = $cgiObject->param('carname');
                my $username = $session{username};

                addTransaction($username, $carname, $cardnumber, $cardtype,
                    $total, $expiry, $sec);
            }
        }

    }
}


################################ 
## New Template Object(step 2)##
################################
my %config=(
	INCLUDE_PATH => [ TEMPLATELIB ],
    );
    
$ttObject = Template->new( \%config );

$template = 'store-purchase.tt2';

###################################### 
## Prep vars for template (step 4a) ##
######################################

$vars = {
    sess_id => $sessionID,
    sess_count => $session{count},
    sess_time => $session{timestamp},
    sess_username => $session{username},
    logged_in => $session{logged_in},
    car => \%car,
    purchase_form => \%purchase_form,
    form_submitted => $form_submitted,
    errors => \%errors
};

if ($session{logged_in}) {
    $vars->{tax} = $tax->{$state};
    $vars->{total} = $car{price} * (
        1 + (($tax->{$state}->{prov_rate} + $tax->{$state}->{can_rate}) / 100 ));
}

###################################### 
## Bind and pass flow (step 4b + 5) ##
######################################
$ttObject->process ( $template, $vars ) 
	or die( $ttObject->error() );

   
######################################

#########################
# Session End           #
#########################

# close and save session
untie(%session);

#if ($session{count} < 10) {
#    # close and save session
#    print "Saving session\n";
#    untie(%session);
#} else {
#    # destroy session after 10
#    tied(%session)->delete();
#    # reset browser cookie
#    $cookie = $cgiObject->cookie(
#        -name => "PERLSESSID",
#        -value => $sessionID,
#        -expires => "-1d"
#    );
#}

__END__



